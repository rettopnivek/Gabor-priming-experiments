sim_theta = function( n, x, prm ) {
# Purpose:
# Simulates data from a piecewise logistic function.
# Arguments:
# n   - The number of trials per observation
# x   - The target contrast
# prm - A vector of two parameters (slope and criterion)
# Returns:
# A vector giving the simulated frequency correct.
# Calculate P(Correct) given RMS contrast values
theta = f_theta( log( x ), prm[1], prm[2] )
# Simulate data from a binomial distribution
y = rbinom( length(x), n, theta )
return( y )
}
f_logLik = function( prm, dat, priors = NULL ) {
# Purpose:
# The log-likelihood function for a piecewise logistic function.
# Arguments:
# prm    - A vector of 2 parameters (slope and criterion)
# dat    - A 3 column matrix, where the first column is for
#          frequency correct, and the second colum is for the
#          total number of trials, and the final column is
#          for the target contrast
# priors - An optional 2x2 matrix giving the mean and standard deviations
#          (per row) for normal priors on the slope and criterion
#          respectively
# Returns:
# The sum of the log-likelihoods.
# Extract data
y = dat[,1] # Frequency correct per RMS contrast value
n = dat[,2] # Total number of trials per RMS contrast value
x = log( dat[,3] ) # RMS contrast value per observation
# Calculate P(Correct) given RMS contrast values
theta = f_theta( x, prm[1], prm[2] )
# Log-likelihood
ll = dbinom( y, n, theta, log = T )
# Sum of the log-likelihoods
sll = sum( ll ); if ( is.na( sll ) ) sll = -Inf
# Priors on parameters
if ( length( priors ) > 0 ) {
prs = dnorm( prm[1], priors[1,1], priors[1,2], log = T ) +
dnorm( prm[2], priors[2,1], priors[2,2], log = T )
} else prs = 1
return( sll + prs )
}
st_f = function() {
# Purpose:
# Function to generate random starting values for fitting routine
# Returns:
# A vector of 2 parameter values to be passed into the fitting
# routine
runif(2,c(.5,1),c(8,5))
}
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 1
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise/.5), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
runCode[4] = T; runCode[1] = F
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 1
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise/.5), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
curNoise
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 1
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 2
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 1
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
str( results )
mean( results[,1] )
mean( results$trace[,1] )
sd( results$trace[,1] )
mean( results$trace[,2] )
sd( results$trace[,2] )
if ( runCode[4] ) {
### Extract accuracy and trial numbers by condition ###
# Total trials
nt = aggregate( rep(1,nrow(rawDat)), list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Proportion correct
ac = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), mean )
# Frequency correct
fc = aggregate( d$Accuracy, list(
d$TargetContrast, d$FoilContrast, d$PrimeType, d$PrimeDuration ), sum )
# Label columns
colnames(nt) = c( 'TC','FC','PT','D','N' )
colnames(ac) = c( 'TC','FC','PT','D','P' )
colnames(fc) = c( 'TC','FC','PT','D','Y' )
# Create single variable to select conditions
cnd = covCreate( nt[,c('FC','PT','D')] )
cnd_sel = 1
# Select data to be fitted
y = fc$Y[ cnd == cnd_sel ];
x = fc$TC[ cnd == cnd_sel ];
n = nt$N[ cnd == cnd_sel ];
curDat = cbind( y, n, x )
curNoise = unique( fc$FC[ cnd == cnd_sel ] );
# Fit data using adaptive Bayesian estimation
# Define vaguely informative priors
Priors = cbind( c(5,2), c(2,2) )
# Parameter recovery
startVal = st_f()
results = Metro_Hastings( f_logLik, startVal, dat = curDat,
priors = Priors, par_names = c('alpha','beta') )
# Extract median of posterior estimates
est = apply( results$trace, 2, median )
if (!savePlot) x11(width=12,height=12)
layout( cbind( c(1,3), c(2,4) ) )
hist( results$trace[,1], freq = F, col = 'grey',
border = 'white', xlab = expression(alpha),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[1], col = 'black' )
hist( results$trace[,2], freq = F, col = 'grey',
border = 'white', xlab = expression(beta),
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Posterior estimate' )
abline( v = est[2], col = 'black' )
# Plot of data
xl = lowerUpper( 1, log( curDat[,3] ) )
plot( xl, c( .3, 1 ), type = 'n',
xlab = 'Log of target contrast', ylab = 'P(Correct)',
bty = 'l' )
points( log( curDat[,3] ), curDat[,1]/curDat[,2], pch = 15 )
legend( 'bottomright', c('Observed','Estimate'),
fill = c('black','blue'), bty = 'n' )
xa = seq( xl[1], xl[2], length = 200 )
ya = f_theta( xa, est[1], est[2] )
lines( xa, ya, col = 'blue' )
# Retrodictive checks
rc = apply( results$trace, 1, function(x) f_theta( xa, x[1], x[2] ) )
rc = apply( rc, 1, function(x) rbinom( length(x), max( curDat[,2] ),
x )/max( curDat[,2] ) )
rc = apply( rc, 2, quantile, prob = c( .025, .975 ) )
polygon( c( xa, rev(xa) ), c( rc[1,], rev( rc[2,] ) ),
border = NA, col = rgb( 0, 0, 1, .2 ) )
rc = apply( results$trace, 1, function(x) g_theta( .75, x[1], x[2] ) )
segments( quantile( rc, .025 ), .75,
quantile( rc, .975 ), .75, col = 'red' )
hist( rc, freq = F, col = 'grey',
border = 'white', xlab = 'Criterion threshold',
ylab = 'Density', bty = 'l',
breaks = 40, main = 'Uncertainty around criterion threshold' )
abline( v = median(rc), col = 'black' )
mtext( paste( 'Noise contrast = ', round(100*curNoise), '%',
sep = '' ),
side = 3, outer = T, line = -1.5 )
}
