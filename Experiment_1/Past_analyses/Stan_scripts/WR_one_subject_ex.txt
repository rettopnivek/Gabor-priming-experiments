data {
  int N; // Number of observations
  int V; // Number of covariates
  int K; // Number of mappings
  int U; // Number of fixed values
  int C[3]; // Number of coefficients
  matrix[V,N] X; // Design matrix
  vector[U] fixed; // Fixed values
  int index[ V + 1, 2 ]; // Indices for filling parameter matrix
  int parSel[K]; // Mapping of coefficients to parameter matrix
  vector[2] Y[N]; // RT and choice
  real<lower=0> min_RT[ C[3] ]; // Smallest response time for each relevant condition
  matrix[sum(C),2] Priors; // Matrix of parameters for prior distributions
}
parameters {
  vector<lower=0.0>[ C[1] ] kappa; // Threshold
  vector<lower=0.0>[ C[2] ] xi; // Drift rate
  vector<lower=0.0,upper=1.0>[ C[3] ] theta; // Proportion for residual latency
}
transformed parameters {
  // Variable declaration
  vector<lower=0.0>[ C[3] ] tau; // Raw residual latency
  
  // Weight fastest RT by proportion for residual latency
  for ( c in 1:C[3] ) tau[c] <- min_RT[c]*theta[c];
}
model {
  // Variable declaration
  vector[ sum(C) ] coef;
  matrix[ 8, N ] param;
  int inc[2];
  vector[N] summands;
  
  // Priors
  inc[1] <- 1;
  for (i in 1:C[1]) {
    kappa[i] ~ normal( Priors[inc[1],1], Priors[inc[1],2] );
  }
  inc[1] <- inc[1] + C[1];
  for (i in 1:C[2]) {
    xi[i] ~ normal( Priors[inc[1],1], Priors[inc[1],2] );
  }
  inc[1] <- inc[1] + C[2];
  for (i in 1:C[3]) {
    theta[i] ~ beta( Priors[inc[1],1], Priors[inc[1],2] );
  }
  
  // Fill in vector of coefficients
  inc[1] <- 1; inc[2] <- C[1];
  coef[ inc[1]:inc[2] ] <- kappa[ 1:C[1] ];
  inc[1] <- inc[1] + C[1]; inc[2] <- inc[2] + C[2];
  coef[ inc[1]:inc[2] ] <- xi[ 1:C[2] ];
  inc[1] <- inc[1] + C[2]; inc[2] <- inc[2] + C[3];
  coef[ inc[1]:inc[2] ] <- tau[ 1:C[3] ];
  
  // Generate parameter matrix
  param <- param_est( X, coef, fixed, index, parSel );
  
  // Likelihood
  for (n in 1:N) {
    summands[n] <- waldrace_log( Y[n], col(param,n) );
  }
  
  // Call to the sampler
  increment_log_prob( sum(summands) );
}