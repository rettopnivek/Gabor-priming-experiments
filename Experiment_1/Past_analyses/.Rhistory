aL = 2; bL = 3.5;
lines( x, L( aL, bL, 1, x ) )
lines( x, L( aL, bL, 0, x ), lty = 2 )
plot( c(-4,4), c(-.5,1), type='n' )
a = seq(-4,4,length=1000)
xa = -2; ba = 3.5
lines( a, L( a, ba, 1, xa ) )
lines( a, L( a, ba, 0, xa ), lty = 2 )
lines( a, der.L.alpha( a, ba, 1, xa ), col = 'red' )
lines( a, der.L.alpha( a, ba, 0, xa ), col = 'red', lty = 2 )
plot( c(-4,4), c(-.5,1), type='n' )
b = seq(-4,4,length=1000)
xb = -2; ab = 2
lines( b, L( ab, b, 1, xb ) )
lines( b, L( ab, b, 0, xb ), lty = 2 )
lines( b, der.L.beta( ab, b, 1, xb ), col = 'red' )
lines( b, der.L.beta( ab, b, 0, xb ), col = 'red', lty = 2 )
layout( cbind( 1, 2, 3 ) )
plot( log( c(0.001,.5)), c(0,1), type='n', xlab = 'Sensory level',
ylab = 'Accuracy', bty = 'l' )
aL = 2; bL = 3.5;
lines( x, L( aL, bL, 1, x ) )
lines( x, L( aL, bL, 0, x ), lty = 2 )
plot( c(-4,8), c(-.5,1), type='n' )
a = seq(-4,8,length=1000)
xa = -2; ba = 3.5
lines( a, L( a, ba, 1, xa ) )
lines( a, L( a, ba, 0, xa ), lty = 2 )
lines( a, der.L.alpha( a, ba, 1, xa ), col = 'red' )
lines( a, der.L.alpha( a, ba, 0, xa ), col = 'red', lty = 2 )
plot( c(-4,4), c(-.5,1), type='n' )
b = seq(-4,4,length=1000)
xb = -2; ab = 2
lines( b, L( ab, b, 1, xb ) )
lines( b, L( ab, b, 0, xb ), lty = 2 )
lines( b, der.L.beta( ab, b, 1, xb ), col = 'red' )
lines( b, der.L.beta( ab, b, 0, xb ), col = 'red', lty = 2 )
plot( a, f.alpha.beta(xa,a,ba), type = 'l' )
a
exp(-8)
1+exp(8)
.5/(1+exp(8))
f.alpha.beta(-1,8,0)
.5+f.alpha.beta(-1,8,0)
.5/(1+exp(8))
.5+.5/(1+exp(8))
f.alpha.beta(-2,8,0)
f.alpha.beta(-2,8,3)
f.alpha.beta(-5,8,0)
-8*( -1 + 3 )
f.alpha.beta(2,8,0)
f.alpha.beta(1,8,0)
10^3
20^3
seq( 0, 8, length = 50 )
alpha = seq( 0, 8, length = 50 )
a1 = dnorm( alpha, 2, 3.5 )
alpha*a1
sum( alpha*a1 )
sum( alpha*(a1/max(a1)) )
x11(); plot( alpha, a1/max(a1) )
library(utilityf)
licence(utilityf)
licence('utilityf')
source('~/.active-rstudio-document', echo=TRUE)
EL
source('~/.active-rstudio-document', echo=TRUE)
mean(EL)
max(EL)
source('~/.active-rstudio-document', echo=TRUE)
nET
nT*nE
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('F:/Stuff/Kevin\'s Stuff/Postdoc/Random Stan and R stuff/SDT Example 2/SDT_visual.R', echo=TRUE)
source('F:/Stuff/Kevin\'s Stuff/Postdoc/Random Stan and R stuff/SDT Example 2/SDT_visual.R', echo=TRUE)
source('F:/Stuff/Kevin\'s Stuff/Postdoc/Random Stan and R stuff/SDT Example 2/SDT_visual.R', echo=TRUE)
source('F:/Stuff/Kevin\'s Stuff/Postdoc/Random Stan and R stuff/SDT Example 2/SDT_visual.R', echo=TRUE)
beta = .5
dprime = 1
sigmaS = 1
sigmaN = 1
pnorm( beta, dprime, sigmaS )
pnorm( beta, dprime, lower.tail = F )
pnorm( beta, dprime, lower.tail = T )
pnorm( beta, 0, lower.tail = F )
pnorm( beta, 0, lower.tail = T )
rowSums( c(1,2) )
N = 30
dprime = rnorm( N, 1, 1 )
beta = -.5 + .25*dprime + rnorm(N,sd=.25)
beta
cor( dprime, beta )
N = 30
dprime = rnorm( N, 1, 1 )
beta = -.5 + .25*dprime + rnorm(N,sd=.5)
cor( dprime, beta )
r = .4
zY = rnorm(N,0,1)
zX = r*zY + rnorm(N)
cor(zY,zX)
# Define hierarchical parameters
mu_d = 1; sig_d = 1;
mu_b = .5; sig_b = 1.2;
rho = .4
zY = rnorm(N,0,1)
zX = rho*zY + rnorm(N)
dprime = zY*sig_d + mu_d;
beta = zX*sig_b + mu_b
dprime
beta
sim = simSDT( dprime, beta, nTrials )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
freq=cbind(rep(0,4))
freq[,1:4]
freq
source('~/.active-rstudio-document', echo=TRUE)
sim
library(MHadaptive)
?"MHadaptive"
?mcmc_r
?Metro_Hastings
?mvnorm
?mvdnorm
?mvnor
library(mvtnorm)
?dmvnorm
Sigma = matrix(0,2,2)
Sigma[c(1,2),c(2,1)]
?Metro_Hastings
val = seq(0,5,length=100)
plot(val,dgamma(val,1,.5),type='l')
plot(val,dgamma(val,2,.5),type='l')
x11(); plot(val,dgamma(val,2,.5),type='l')
x11(); plot(val,dgamma(val,2,2),type='l')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
start_val
likelihoodSDT( sim, par[1:N], par[(N+1):2*N], ln = T, summation = T )
likelihoodSDT( sim, start_val[1:N], start_val[(N+1):2*N], ln = T, summation = T )
start_val[1:N]
start_val[(N+1):2*N]
par[N+1]
length(start_val)
start_val[N+1]
start_val[(N+1]
start_val[(N+1):60]
source('~/.active-rstudio-document', echo=TRUE)
likelihoodSDT( sim, start_val[1:N], start_val[(N+1):(2*N)], ln = T, summation = T )
sim
likelihoodSDT( rbind(sim[20,], start_val[1:N], start_val[(N+1):(2*N)], ln = T, summation = T )
)
likelihoodSDT( rbind(sim[20,]), start_val[1:N], start_val[(N+1):(2*N)], ln = T, summation = T )
rbind(sim[20,])
likelihoodSDT( rbind(sim[20,]), start_val[20], start_val[20+N+1], ln = T, summation = T )
rbind(sim[20,])[,1:2]
likelihoodSDT( rbind(sim[20,]), start_val[20], start_val[20+N+1], ln = T )
rowSums( rbind(sim[20,])[,1:2] )
rowSums( rbind(sim[20,]) )
rowSums( rbind(sim[20,1:2]) )
freq = sim
freq = freq[,ord]
ord=1:4
freq = freq[,ord]
pH = pnorm( beta, dprime, lower.tail = F )
pM = pnorm( beta, dprime, lower.tail = T )
pFA = pnorm( beta, 0, lower.tail = F )
pCR = pnorm( beta, 0, lower.tail = T )
pH
rowSums( freq[,1:2] )
rowSums( freq[,3:4] )
freq = rbind( sim[20,] )
rowSums( freq[,1:2] ),
rowSums( freq[,1:2] )
freq
freq[,1:2]
freq[1:length(freq),1:2]
freq
freq[1:nrow(freq),1:2]
freq[1:nrow(freq),1:2]
likelihoodSDT( rbind(sim[20:21,]), start_val[20:21], start_val[20:21+N+1], ln = T )
likelihoodSDT( sim, start_val[1:N], start_val[1:N + N], ln = T )
sim[21,]
start_val[21]
start_val[21+N]
source('~/.active-rstudio-document', echo=TRUE)
par = start_val
round(start_val,2)
freq=sim
# Number of subjects
N = nrow(freq)
# Extract parameters
dprime = par[1:N]
beta = par[ (N+1):(2*N) ]
mu_d = par[ 2*N + 1 ]
sig_d = par[ 2*N + 2 ]
mu_b = par[ 2*N + 3 ]
sig_b = par[ 2*N + 4 ]
rho = par[ 2*N + 5 ]
rho
sig_b
sig_d
li_func = function( par, freq, priors ) {
# Number of subjects
N = nrow(freq)
# Extract parameters
dprime = par[1:N]
beta = par[ (N+1):(2*N) ]
mu_d = par[ 2*N + 1 ]
mu_b = par[ 2*N + 2 ]
sig_d = par[ 2*N + 3 ]
sig_b = par[ 2*N + 4 ]
rho = par[ 2*N + 5 ]
out = -Inf;
# Check for illegal values
if ( sig_d > 0 | sig_b > 0 | rho <= 1 | rho >= -1 ) {
# The priors
P = dnorm( c(mu_d,mu_b), priors[1:2,1],
priors[1:2,2], log = T ) +
dgamma( c(sig_d,sig_b), priors[3:4,1],
priors[3:4,2], log = T ) +
dbeta( (rho + 1)/2, priors[5,1], priors[5,2], log = T )
# The hierarchy
# The mean vector
Mu = c( mu_d, mu_b )
# The covariance matrix
Sigma = matrix(0,2,2)
Sigma[1,1] = sig_d^2
Sigma[2,2] = sig_b^2
Sigma[1,2] = rho*sig_d*sig_b
Sigma[2,1] = rho*sig_d*sig_b
parLow = matrix(NA,N,2)
parLow[,1] = dprime; parLow[,2] = beta
H = dmvnorm( parLow, Mu, Sigma, log = T )
# The likelihood
L = likelihoodSDT( freq, dprime, beta, ln = T, summation = T )
out = sum(L) + H + P
if (is.na(out)) out = -Inf
}
return( out )
}
likelihoodSDT( freq, dprime, beta, ln = T, summation = T )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Number of subjects
N = nrow(freq)
# Extract parameters
dprime = par[1:N]
beta = par[ (N+1):(2*N) ]
mu_d = par[ 2*N + 1 ]
mu_b = par[ 2*N + 2 ]
sig_d = par[ 2*N + 3 ]
sig_b = par[ 2*N + 4 ]
rho = par[ 2*N + 5 ]
out = -Inf;
# The priors
P = dnorm( c(mu_d,mu_b), priors[1:2,1],
priors[1:2,2], log = T ) +
dgamma( c(sig_d,sig_b), priors[3:4,1],
priors[3:4,2], log = T ) +
dbeta( (rho + 1)/2, priors[5,1], priors[5,2], log = T )
P
P = sum( dnorm( c(mu_d,mu_b), priors[1:2,1],
priors[1:2,2], log = T ) ) +
sum( dgamma( c(sig_d,sig_b), priors[3:4,1],
priors[3:4,2], log = T ) ) +
dbeta( (rho + 1)/2, priors[5,1], priors[5,2], log = T )
# The hierarchy
# The mean vector
Mu = c( mu_d, mu_b )
# The covariance matrix
Sigma = matrix(0,2,2)
Sigma[1,1] = sig_d^2
Sigma[2,2] = sig_b^2
Sigma[1,2] = rho*sig_d*sig_b
Sigma[2,1] = rho*sig_d*sig_b
parLow = matrix(NA,N,2)
parLow[,1] = dprime; parLow[,2] = beta
H = dmvnorm( parLow, Mu, Sigma, log = T )
# The likelihood
L = likelihoodSDT( freq, dprime, beta, ln = T, summation = T )
out = sum(L) + sum(H) + P
out
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length( start_val )
source('~/.active-rstudio-document', echo=TRUE)
# Number of subjects
N = nrow(freq)
# Extract parameters
dprime = par[1:N]
beta = par[ (N+1):(2*N) ]
mu_d = par[ 2*N + 1 ]
mu_b = par[ 2*N + 2 ]
sig_d = par[ 2*N + 3 ]
sig_b = par[ 2*N + 4 ]
rho = par[ 2*N + 5 ]
rho = 1/(1+exp(-rho)) # Logistic transform
out = -Inf;
sig_d > 0 | sig_b > 0 | rho <= 1 | rho >= -1
log(0)
log(1)
P = sum( dnorm( par[2*N + 1:5], priors[1:5,1],
priors[1:5,2], log = T ) )
# The hierarchy
# The mean vector
Mu = c( mu_d, mu_b )
# The covariance matrix
Sigma = matrix(0,2,2)
Sigma[1,1] = sig_d^2
Sigma[2,2] = sig_b^2
Sigma[1,2] = rho*sig_d*sig_b
Sigma[2,1] = rho*sig_d*sig_b
Sigma
solve(Sigma
)
det(Sigma)
parLow = matrix(NA,N,2)
parLow[,1] = dprime; parLow[,2] = beta
H = dmvnorm( parLow, Mu, Sigma, log = T )
# The likelihood
L = likelihoodSDT( freq, dprime, beta, ln = T, summation = T )
H
L
source('~/.active-rstudio-document', echo=TRUE)
install.packages('rstan')
library(rstan)
library(rstan)
install.packages('rstan')
# Number of durations
nD = 5
# Number of possible prime/target combinations
nC = 4
# Practice Blocks and Trials
nP = 1
nPT = 96
# Number of durations
nD = 5
# Number of possible prime/target combinations
nC = 4
# Practice Blocks and Trials
nP = 1
nPT = 96
# Adaptive blocks and Trials
nA = 3
nATlong = 64
nATshort = 32
DxC = nD*nC; # Number of conditions to test per block
DxC
nE = 5
DxC = nD*nC; # Number of conditions to test per block
nT = 5;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
# Total number of trials
trialTotal = nPT + nATlong + (nA-1)*nATshort +
nE*nET
# Trial length
trialLength = 2000 # ms
nRep = 1000
EL = numeric(nRep)
for (e in 1:nRep) {
# Descriptive model of RT
RTguess = rinvgauss( trialTotal, 1.673, 3.310, 1 )
tmp = runif(trialTotal, 0, 5 )
u = runif(trialTotal)
a = .94
RTguess[ u > a ] = tmp[ u > a ]
# Experiment length in minutes
ExpLength = sum( ((trialLength + RTguess)/1000)/60 )
EL[e] = ExpLength
}
print( max(EL) )
library(seqmodels)
# Number of durations
nD = 5
# Number of possible prime/target combinations
nC = 4
# Practice Blocks and Trials
nP = 1
nPT = 96
# Adaptive blocks and Trials
nA = 3
nATlong = 64
nATshort = 32
# Experimental blocks and Trials
nE = 5
DxC = nD*nC; # Number of conditions to test per block
nT = 5;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
# Total number of trials
trialTotal = nPT + nATlong + (nA-1)*nATshort +
nE*nET
# Trial length
trialLength = 2000 # ms
nRep = 1000
EL = numeric(nRep)
for (e in 1:nRep) {
# Descriptive model of RT
RTguess = rinvgauss( trialTotal, 1.673, 3.310, 1 )
tmp = runif(trialTotal, 0, 5 )
u = runif(trialTotal)
a = .94
RTguess[ u > a ] = tmp[ u > a ]
# Experiment length in minutes
ExpLength = sum( ((trialLength + RTguess)/1000)/60 )
EL[e] = ExpLength
}
print( max(EL) )
min(RTguess)
x11(); hist(RTguess)
source('~/Experiments/Gabor_priming_2016/Timing_calculations_for_experiment.R', echo=TRUE)
hist(RTguess)
trialTotal
source('~/Experiments/Gabor_priming_2016/Timing_calculations_for_experiment.R', echo=TRUE)
source('~/Experiments/Gabor_priming_2016/Timing_calculations_for_experiment.R', echo=TRUE)
source('~/Experiments/Gabor_priming_2016/Timing_calculations_for_experiment.R', echo=TRUE)
source('~/Experiments/Gabor_priming_2016/Timing_calculations_for_experiment.R', echo=TRUE)
5*4*4
5*4*4*6
trialTotal
480+32+32+80
12*3*7
4*3*7
# Number of durations
nD = 3
# Number of possible prime/target combinations
nC = 4
# Practice Blocks and Trials
nP = 1
nPT = 96
# Adaptive blocks and Trials
nA = 3
nATlong = 84
nATshort = 36
# Experimental blocks and Trials
nE = 6
DxC = nD*nC; # Number of conditions to test per block
nT = 4;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
nE = 6
DxC = nD*nC; # Number of conditions to test per block
nT = 5;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
nE = 6
DxC = nD*nC; # Number of conditions to test per block
nT = 6;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
# Number of durations
nD = 3
# Number of possible prime/target combinations
nC = 4
# Practice Blocks and Trials
nP = 1
nPT = 96
# Adaptive blocks and Trials
nA = 3
nATlong = 84
nATshort = 36
# Experimental blocks and Trials
nE = 6
DxC = nD*nC; # Number of conditions to test per block
nT = 6;
nET = DxC*nT
cat( c('Trials per block: ', nET, '\n' ) )
cat( c('Trials per condition: ', nET*nE/DxC, '\n' ) )
# Total number of trials
trialTotal = nPT + nATlong + (nA-1)*nATshort +
nE*nET
# Trial length
trialLength = 2000 # ms
nRep = 1000
EL = numeric(nRep)
for (e in 1:nRep) {
# Descriptive model of RT
RTguess = rinvgauss( trialTotal, 1.673, 3.310, 1 ) + .25
tmp = runif(trialTotal, 0, 5 )
u = runif(trialTotal)
a = .94
RTguess[ u > a ] = tmp[ u > a ]
# Experiment length in minutes
ExpLength = sum( ((trialLength + RTguess)/1000)/60 )
EL[e] = ExpLength
}
print( max(EL) )
source('~/Experiments/Gabor_priming_2016_v2/Timing_calculations_for_experiment.R', echo=TRUE)
trialTotal
684*4
684*4/60
684*5/60
684*(2+5)/60
684*(2+4)/60
684*(2+3.5)/60
684*(2+1)/60
setwd("F:/Stuff/Kevin's Stuff/Postdoc/Random Stan and R stuff/Stuff for Nick")
# Load in data to R workspace
load("Original_Rec_Mem_data.RData")
d = OriginalRecMem
d$ImageType[ d$Subject == 1 ]
setwd("~/Experiments/Gabor_priming_2016/Analyses")
